export interface TranscriptSnippet {
    text: string;
    start: number;
    duration: number;
}
export interface Transcript {
    snippets: TranscriptSnippet[];
    videoId: string;
    language: string;
    languageCode: string;
    isGenerated: boolean;
}
export interface VideoMetadata {
    id: string;
    title: string;
    description: string;
    author: string;
    channelId: string;
    lengthSeconds: number;
    viewCount: number;
    isPrivate: boolean;
    isLiveContent: boolean;
    publishDate?: string;
    category?: string;
    keywords?: string[];
    thumbnails?: ThumbnailInfo[];
}
export interface ThumbnailInfo {
    url: string;
    width: number;
    height: number;
}
/**
 * Standardized response format for transcript fetching
 * Contains all possible return data regardless of options used
 */
export interface TranscriptResponse {
    /** The transcript data */
    transcript: Transcript;
    /** Video metadata (always included) */
    metadata: VideoMetadata;
    /** Formatted text if a formatter was specified (undefined if no formatter used) */
    formattedText?: string;
}
export type FormatterType = 'text' | 'json' | 'srt' | 'webvtt';
export interface YouTubeTranscriptError {
    videoId: string;
}
export declare class VideoUnavailable extends Error implements YouTubeTranscriptError {
    videoId: string;
    constructor(videoId: string);
}
export declare class NoTranscriptFound extends Error implements YouTubeTranscriptError {
    videoId: string;
    languages: string[];
    constructor(videoId: string, languages: string[]);
}
export declare class TranscriptsDisabled extends Error implements YouTubeTranscriptError {
    videoId: string;
    constructor(videoId: string);
}
export declare class NotTranslatable extends Error implements YouTubeTranscriptError {
    videoId: string;
    constructor(videoId: string);
}
export declare class TranslationLanguageNotAvailable extends Error implements YouTubeTranscriptError {
    videoId: string;
    language: string;
    constructor(videoId: string, language: string);
}
export declare class IpBlocked extends Error implements YouTubeTranscriptError {
    videoId: string;
    constructor(videoId: string);
}
export interface TranslationLanguage {
    languageCode: string;
    languageName: string;
}
//# sourceMappingURL=types.d.ts.map