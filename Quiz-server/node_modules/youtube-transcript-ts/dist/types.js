export class VideoUnavailable extends Error {
    constructor(videoId) {
        super(`Video ${videoId} is unavailable`);
        this.videoId = videoId;
        this.name = 'VideoUnavailable';
    }
}
export class NoTranscriptFound extends Error {
    constructor(videoId, languages) {
        super(`No transcript found for video ${videoId} in languages: ${languages.join(', ')}`);
        this.videoId = videoId;
        this.languages = languages;
        this.name = 'NoTranscriptFound';
    }
}
export class TranscriptsDisabled extends Error {
    constructor(videoId) {
        super(`Transcripts are disabled for video ${videoId}`);
        this.videoId = videoId;
        this.name = 'TranscriptsDisabled';
    }
}
export class NotTranslatable extends Error {
    constructor(videoId) {
        super(`Video ${videoId} is not translatable`);
        this.videoId = videoId;
        this.name = 'NotTranslatable';
    }
}
export class TranslationLanguageNotAvailable extends Error {
    constructor(videoId, language) {
        super(`Translation language ${language} is not available for video ${videoId}`);
        this.videoId = videoId;
        this.language = language;
        this.name = 'TranslationLanguageNotAvailable';
    }
}
export class IpBlocked extends Error {
    constructor(videoId) {
        super(`IP blocked for video ${videoId}`);
        this.videoId = videoId;
        this.name = 'IpBlocked';
    }
}
//# sourceMappingURL=types.js.map