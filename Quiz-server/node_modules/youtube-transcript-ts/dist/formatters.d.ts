import { Transcript, TranscriptSnippet } from './types';
export declare abstract class Formatter {
    abstract format(transcript: Transcript): string;
    /**
     * Format multiple transcripts
     * @param transcripts Array of transcripts to format
     * @returns Formatted string containing all transcripts
     */
    formatTranscripts(transcripts: Transcript[]): string;
}
export declare class JSONFormatter extends Formatter {
    format(transcript: Transcript): string;
    /**
     * Format multiple transcripts as a JSON array
     */
    formatTranscripts(transcripts: Transcript[]): string;
}
export declare class TextFormatter extends Formatter {
    format(transcript: Transcript): string;
}
declare abstract class TextBasedFormatter extends TextFormatter {
    protected abstract formatTimestamp(hours: number, mins: number, secs: number, ms: number): string;
    protected abstract formatTranscriptHeader(lines: string[]): string;
    protected abstract formatTranscriptLine(index: number, timeText: string, snippet: TranscriptSnippet): string;
    protected secondsToTimestamp(time: number): string;
    private divmod;
    format(transcript: Transcript): string;
    /**
     * Format multiple transcripts with separator
     */
    formatTranscripts(transcripts: Transcript[]): string;
}
export declare class SRTFormatter extends TextBasedFormatter {
    protected formatTimestamp(hours: number, mins: number, secs: number, ms: number): string;
    protected formatTranscriptHeader(lines: string[]): string;
    protected formatTranscriptLine(index: number, timeText: string, snippet: TranscriptSnippet): string;
    private pad;
}
export declare class WebVTTFormatter extends TextBasedFormatter {
    protected formatTimestamp(hours: number, mins: number, secs: number, ms: number): string;
    protected formatTranscriptHeader(lines: string[]): string;
    protected formatTranscriptLine(index: number, timeText: string, snippet: TranscriptSnippet): string;
    private pad;
}
export type FormatterType = 'json' | 'text' | 'srt' | 'webvtt';
export declare class FormatterFactory {
    static readonly TYPES: {
        readonly json: typeof JSONFormatter;
        readonly text: typeof TextFormatter;
        readonly srt: typeof SRTFormatter;
        readonly webvtt: typeof WebVTTFormatter;
    };
    static create(type?: FormatterType): Formatter;
}
export {};
//# sourceMappingURL=formatters.d.ts.map